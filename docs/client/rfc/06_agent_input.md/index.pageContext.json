{"_urlRewrite":null,"pageId":"/src/@document/@chapter","routeParams":{"document":"rfc","chapterSlug":"06_agent_input"},"data":{"sitemap":{"manifesto":[{"id":"Call","number":1,"numberStr":"01","name":"Call","slug":"01_call","path":"01_call.md","url":"/manifesto/01_call.md"},{"id":"Inner Journey","number":2,"numberStr":"02","name":"Inner Journey","slug":"02_inner_journey","path":"02_inner_journey.md","url":"/manifesto/02_inner_journey.md"},{"id":"Outer Work","number":3,"numberStr":"03","name":"Outer Work","slug":"03_outer_work","path":"03_outer_work.md","url":"/manifesto/03_outer_work.md"}],"rfc":[{"id":"00_glossary","number":0,"numberStr":"00","name":"00_glossary","slug":"00_glossary","path":"00_glossary.md","url":"/rfc/00_glossary.md"},{"id":"The Mechanics of a Living Web","number":1,"numberStr":"01","name":"The Mechanics of a Living Web","slug":"01_protocol_ideas","path":"01_protocol_ideas.md","url":"/rfc/01_protocol_ideas.md"},{"id":"The Idea-to-Call Pipeline","number":2,"numberStr":"02","name":"The Idea-to-Call Pipeline","slug":"02_agent_calls","path":"02_agent_calls.md","url":"/rfc/02_agent_calls.md"},{"id":"Combining Scope and Method","number":3,"numberStr":"03","name":"Combining Scope and Method","slug":"03_agent_imports","path":"03_agent_imports.md","url":"/rfc/03_agent_imports.md"},{"id":"1. Foundational Requirement: The State System","number":4,"numberStr":"04","name":"1. Foundational Requirement: The State System","slug":"04_agent_instancing","path":"04_agent_instancing.md","url":"/rfc/04_agent_instancing.md"},{"id":"From Poker-Specific to Protocol-Driven","number":5,"numberStr":"05","name":"From Poker-Specific to Protocol-Driven","slug":"05_system_reactor","path":"05_system_reactor.md","url":"/rfc/05_system_reactor.md"},{"id":"The `Input` Message Type","number":6,"numberStr":"06","name":"The `Input` Message Type","slug":"06_agent_input","path":"06_agent_input.md","url":"/rfc/06_agent_input.md"}],"blueprint":[{"id":"Core Components","number":0,"numberStr":"00","name":"Core Components","slug":"00_architecture","path":"00_architecture.md","url":"/blueprint/00_architecture.md"},{"id":"B","number":0,"numberStr":"00","name":"B","slug":"00_glossary","path":"00_glossary.md","url":"/blueprint/00_glossary.md"},{"id":"New Ideas in This Chapter","number":0,"numberStr":"00","name":"New Ideas in This Chapter","slug":"00_references","path":"00_references.md","url":"/blueprint/00_references.md"},{"id":"New Ideas in This Chapter","number":1,"numberStr":"01","name":"New Ideas in This Chapter","slug":"01_vibes","path":"01_vibes.md","url":"/blueprint/01_vibes.md"},{"id":"Core Tables","number":1,"numberStr":"01","name":"Core Tables","slug":"01_vibes_database","path":"01_vibes_database.md","url":"/blueprint/01_vibes_database.md"},{"id":"Examples of Vibe Structures","number":1,"numberStr":"01","name":"Examples of Vibe Structures","slug":"01_vibes_examples","path":"01_vibes_examples.md","url":"/blueprint/01_vibes_examples.md"},{"id":"New Ideas in This Chapter","number":2,"numberStr":"02","name":"New Ideas in This Chapter","slug":"02_instructions","path":"02_instructions.md","url":"/blueprint/02_instructions.md"},{"id":"Example 1: Process Scheduling","number":2,"numberStr":"02","name":"Example 1: Process Scheduling","slug":"02_instructions_examples","path":"02_instructions_examples.md","url":"/blueprint/02_instructions_examples.md"},{"id":"Context Switching with Execution Environments","number":2,"numberStr":"02","name":"Context Switching with Execution Environments","slug":"02_instructions_guidance","path":"02_instructions_guidance.md","url":"/blueprint/02_instructions_guidance.md"},{"id":"New Ideas in This Chapter","number":4,"numberStr":"04","name":"New Ideas in This Chapter","slug":"04_refinements","path":"04_refinements.md","url":"/blueprint/04_refinements.md"},{"id":"Detailed Example: Evolving Record Vibe Schemas","number":4,"numberStr":"04","name":"Detailed Example: Evolving Record Vibe Schemas","slug":"04_refinements_examples","path":"04_refinements_examples.md","url":"/blueprint/04_refinements_examples.md"},{"id":"New Ideas in This Chapter","number":5,"numberStr":"05","name":"New Ideas in This Chapter","slug":"05_exchange","path":"05_exchange.md","url":"/blueprint/05_exchange.md"},{"id":"New Ideas in This Chapter","number":6,"numberStr":"06","name":"New Ideas in This Chapter","slug":"06_budgets","path":"06_budgets.md","url":"/blueprint/06_budgets.md"},{"id":"Self-Sustaining Startup Ecosystem","number":6,"numberStr":"06","name":"Self-Sustaining Startup Ecosystem","slug":"06_budgets_examples","path":"06_budgets_examples.md","url":"/blueprint/06_budgets_examples.md"},{"id":"New Ideas in This Chapter","number":6,"numberStr":"06","name":"New Ideas in This Chapter","slug":"06_budgets_stats","path":"06_budgets_stats.md","url":"/blueprint/06_budgets_stats.md"},{"id":"New Ideas in This Chapter","number":7,"numberStr":"07","name":"New Ideas in This Chapter","slug":"07_processes","path":"07_processes.md","url":"/blueprint/07_processes.md"},{"id":"New Ideas in This Chapter","number":8,"numberStr":"08","name":"New Ideas in This Chapter","slug":"08_branches","path":"08_branches.md","url":"/blueprint/08_branches.md"},{"id":"Navigating the Determinism Landscape","number":12,"numberStr":"12","name":"Navigating the Determinism Landscape","slug":"12_determinism","path":"12_determinism.md","url":"/blueprint/12_determinism.md"}]},"content":"<h1>The Input Protocol</h1>\n<p><em>For definitions of key terms used in this document, please refer to the <a href=\"./00_glossary.md\">Glossary</a>.</em></p>\n<p>This document describes the <strong>Input Protocol</strong>, a system for defining structured inputs for <code>Ideas</code>. This protocol introduces a special message type that, when included in an <code>Idea</code>&#39;s context, transforms it from a static piece of knowledge into an executable, function-like entity known as an <strong>Ideator</strong>.</p>\n<h2>The <code>Input</code> Message Type</h2>\n<p>The <code>Input</code> message is a special type of context message designed to formally declare the data an <code>Idea</code> accepts. It is the mechanism that captures the structured input used to produce a given <code>solution</code>, completing the &quot;Idea Triplet&quot; and providing a full, reproducible record of the creative or computational process.</p>\n<p>An <code>Input</code> message contains two key properties:</p>\n<ol>\n<li><strong><code>schema</code></strong>: A JSON Schema object that defines the structure, types, and constraints of the data the <code>Idea</code> expects.</li>\n<li><strong><code>input</code></strong>: A concrete data object that conforms to the <code>schema</code> and represents the actual values used for a specific execution.</li>\n</ol>\n<p>By defining its inputs in this structured way, any <code>Idea</code> can become self-describing not only in its output (<code>solution</code> and <code>schema</code>) but also in what it requires to be generated.</p>\n<h3>A Gateway to Usability</h3>\n<p>A significant advantage of this protocol is its ability to enable automatic user interface generation. Because the <code>input</code>&#39;s <code>schema</code> explicitly defines the required data, a system can dynamically render a form with the correct fields, labels, and validation. This allows any <code>Idea</code> to be instantly surfaced to a human user through a functional UI, dramatically lowering the barrier to interaction.</p>\n<h2>From Idea to Ideator</h2>\n<p>As described in the <a href=\"./01_protocol_ideas.md\">Idea Protocol</a>, the presence of an <code>Input</code> message in an <code>Idea</code>&#39;s context is the definitive signal that it is an <strong>Ideator</strong>â€”an <code>Idea</code> that performs work. It becomes a reproducible function.</p>\n<h2>Interaction with the Instancing Protocol</h2>\n<p>The <code>Input</code> message is fully compatible with the <a href=\"./04_agent_instancing.md\">Instancing Protocol</a>, allowing for sophisticated data-sourcing strategies when processing multiple instances at once. It can operate in two distinct modes:</p>\n<ol>\n<li><p><strong>Global Input</strong>: If an <code>Input</code> message is provided in the agent&#39;s context without an <code>_instance</code> property, its <code>input</code> data is treated as a global value. It is implicitly available to every instance being processed in the request. This is useful for providing shared configuration, prompts, or parameters that apply to all instances uniformly.</p>\n</li>\n<li><p><strong>Instance-Specific Input</strong>: If an <code>Input</code> message includes an <code>_instance</code> identifier, its <code>input</code> data is sourced directly from that specific instance&#39;s state. This provides a powerful mechanism for per-instance overrides or for feeding the unique data of each instance into a common <code>Ideator</code>.</p>\n</li>\n</ol>\n<p>This dual-mode capability allows for the creation of flexible and efficient multi-instance workflows, where a single <code>Ideator</code> can be configured with a baseline of global inputs and then customized with specific data from each instance it processes.</p>\n<h2>The Inversion: From Ideator to Tool</h2>\n<p>While an <code>Ideator</code> is a self-contained, executable concept, to integrate it into an agent&#39;s imperative workflow, we must convert it into a <strong>Tool</strong>. The mechanical process of turning an output-focused <code>Ideator</code> into an interface-focused <code>Tool</code> is an <strong>inversion</strong>. We restructure its components to prioritize its inputs.</p>\n<p>An <code>Idea</code> is a triplet defined by its output <code>schema</code> and <code>solution</code>:\n<code>{ context, schema, solution }</code></p>\n<p>To convert it into a <code>Tool</code>, we look inside its <code>context</code> for the <code>Input</code> message. The primary step of inversion is to <strong>promote</strong> the <code>input</code>&#39;s schema to become the top-level <code>params</code> schema for the <code>Tool</code>.</p>\n<p>This creates a <code>Tool</code> definition, which is essentially a function signature ready to be registered in an agent&#39;s system, ready to be used in a <code>Call</code>.</p>\n","currentChapter":"The `Input` Message Type"}}